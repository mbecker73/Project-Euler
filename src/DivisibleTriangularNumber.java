/*
 * Project Euler Problem 12
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

public class DivisibleTriangularNumber {
	public static void main(String[] args) {
		double start = System.currentTimeMillis();

		int i = 1;
		int number = 0;
		//find first number with over 500 divisors
		while(findNumberOfFactors(number) < 500){
			number+= i; //only need triangle numbers
			i++;
		}
		System.out.println(number);
		
		System.out.println(System.currentTimeMillis() -start +"ms");
	}
	
	/**
	 * Given an integer, finds the number of factors for it.
	 * @param number
	 * @return integer count of number of factors
	 */
	public static int findNumberOfFactors(int number) {		
		 int factorCount = 0;
		 
		 //only need to test up to square root of the number
		 for(int i=1; i<= Math.sqrt(number); i++){
			 if(number % i == 0){
				 factorCount += 2; //for i and the number itself
		     }
		 }
		 
		 return factorCount;
	}

}
